// Author: Meer Patel

import * as React from 'react';
import { useForm, Controller } from 'react-hook-form';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import Modal from '@mui/material/Modal';
import TextField from '@mui/material/TextField';
import Grid from '@mui/material/Grid';
import SendIcon from '@mui/icons-material/Send';
import axios from 'axios';
import { TourPackage } from '../../pages/TourDetail';
import { useNavigate } from 'react-router-dom';
import { toast } from "react-toastify";
import { getToken } from '../../utils/authUtils';

const style = {
    position: 'absolute' as 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 500,
    bgcolor: 'background.paper',
    border: 'transparent',
    boxShadow: 24,
    p: 4,
    borderRadius: "10px"
};

const BookingForm = ({ tourPackage }: { tourPackage: TourPackage }) => {
    const [open, setOpen] = React.useState(false);
    const { handleSubmit, control, setValue, watch } = useForm({
        defaultValues: {
            noOfPeople: 1,
        }
    });
    const navigate = useNavigate()

    const noOfPeople = watch("noOfPeople");
    const totalCost = tourPackage.price * noOfPeople;
    const { userId } = localStorage.getItem('user') ? JSON.parse(localStorage.getItem('user') as string) : ""
    console.log("userId", userId);

    const onSubmit = async (data: any) => {
        if(getToken()){
        const payload = {
            id: userId, // Assuming this is auto-generated by the backend or another mechanism
            tourPackageId: tourPackage.id,
            totalCost: totalCost,
            noOfPeople: data.noOfPeople,
            note: data.note || '',
        };
        console.log("payload", payload);

        try {
            await axios.post(`${(import.meta as any).env.VITE_BASE_API_URL}/api/v1/booking`, payload).then((response) => {
                if (response.data.success) {
                    toast.success("Booking Successful!", {
                        position: "top-center",
                        autoClose: 2000
                    });
                    navigate(`/history/${userId}`)
                };
            })
            // Handle success (e.g., close modal, show success message, etc.)
            handleClose();
        } catch (error) {
            console.error('Error booking tour:', error);
            // Handle error (e.g., show error message)
        }
    }
    else{
        toast.error("Please login to book the tour", {
            position: "top-center",
            autoClose: 2000
        });
        navigate('/login')
    }
    };

    const handleOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);

    return (
        <div>
            <Button
                variant="contained"
                color="primary"
                size="large"
                startIcon={<SendIcon />}
                sx={{ mt: 3 }}
                onClick={handleOpen}
            >
                Book Your Adventure Now
            </Button>
            <Modal
                open={open}
                onClose={handleClose}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={style}>
                    <Typography variant="h5" component="h2" sx={{ mb: 2 }}>
                        {tourPackage.name}
                    </Typography>
                    <img src={tourPackage.image} alt={tourPackage.name} style={{ height: "30vh", width: '100%', borderRadius: '10px' }} />
                    <form onSubmit={handleSubmit(onSubmit)} className='mt-2'>
                        <Controller
                            name="noOfPeople"
                            control={control}
                            rules={{
                                required: "Number of people is required",
                                min: {
                                    value: 1,
                                    message: "At least one person is required"
                                }
                            }}
                            render={({ field, fieldState }) => (
                                <TextField
                                    {...field}
                                    label="Number of People"
                                    type="number"
                                    variant="outlined"
                                    margin="normal"
                                    fullWidth
                                    inputProps={{ min: 1 }}
                                    error={!!fieldState.error}
                                    helperText={fieldState.error ? fieldState.error.message : null}
                                    onChange={(e) => {
                                        const value = parseInt(e.target.value, 10);
                                        if (value >= 1) {
                                            field.onChange(value);
                                        } else {
                                            setValue("noOfPeople", 1);
                                        }
                                    }}
                                />
                            )}
                        />
                        <Grid container spacing={2}>
                            <Grid item xs={6}>
                                <Typography >
                                    <strong>Total Cost:</strong> ${totalCost}
                                </Typography>
                            </Grid>
                            <Grid item xs={6}>
                                <Typography >
                                    <strong>Duration:</strong> {tourPackage.duration} days
                                </Typography>
                            </Grid>
                            <Grid item xs={6}>
                                <Typography >
                                    <strong>Start Date:</strong> {new Date(tourPackage.startDate).toLocaleDateString()}
                                </Typography>
                            </Grid>
                            <Grid item xs={6}>
                                <Typography >
                                    <strong>End Date:</strong> {new Date(tourPackage.endDate).toLocaleDateString()}
                                </Typography>
                            </Grid>
                        </Grid>
                        <Typography id="modal-modal-description" sx={{ mt: 1 }}>
                            <strong>Activities:</strong>  {tourPackage.activities}
                        </Typography>
                        <Typography id="modal-modal-description" sx={{ mt: 1 }}>
                            {tourPackage.accommodationDetails}
                        </Typography>
                        <Typography id="modal-modal-description" sx={{ mt: 1 }}>
                            {tourPackage.transportationDetails}
                        </Typography>
                        <Button type="submit" variant="contained" color="primary" sx={{ mt: 2, width: "100%" }}>
                            Submit Booking
                        </Button>
                    </form>
                </Box>
            </Modal>
        </div>
    );
};

export default BookingForm;
